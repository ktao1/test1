<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Preview</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
    integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
  <link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css" />
  <link href="vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
  <link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700,300italic,400italic,700italic"
    rel="stylesheet" type="text/css">
  <link href="vendor/simple-line-icons/css/simple-line-icons.css" rel="stylesheet">
  <script src="jquery-3.5.1.min.js"></script>

  <style>
    html,
    body {
      height: 100%;
    }

    body {
      display: -ms-flexbox;
      /* display: -webkit-box;
      display: flex; */
      -ms-flex-align: center;
      -ms-flex-pack: center;
      -webkit-box-align: center;
      -webkit-box-pack: center;
      justify-content: center;
      padding-bottom: 40px;
      background-color: #f5f5f5;
    }
  </style>
</head>

<body>
  <<div class="container" id="video">

    <header class="masthead d-flex bg-light">
      <div class="container text-center my-auto">
        <h1 class="mb-1">We processing your video, please wait and refash page to see the result</h1>
        <h3 class="mb-5">
          <em></em>
        </h3>
      </div>
      <div class="overlay"></div>
    </header>

    <div class="row">
      <div class="col-sm-7">
        <div id="player">
        </div>
      </div>

      <div class="col-sm-5">
        <div id="chapter" class="list-group">
        </div>
      </div>

    </div>

    <div class="row">
      <form action="/insertCaption" method="POST" enctype="multipart/form-data">
        <div class="form-group">
          <label for="exampleFormControlFile1">Your subtitle</label>
          <input type="file" class="form-control" name="file" id="subtitle" required id="" / >
          <button class="btn btn-block btn-danger btn-xl" id="submit">
            Insert your caption
          </button>
      </form>
    </div>
    </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>
    <script>


      $("#submit").on('click', function (event) {
        var type = $('#subtitle').val().split('\\').pop().split('.')[1];
        if (type != 'srt' &&
          type != 'sbv' &&
          type != 'sub' &&
          type != 'vtt' &&
          type != 'ttml' &&
          type != 'dfxp' &&
          type != 'scc' &&
          type != 'stl' &&
          type != 'cap') {
          alert('Please select a correct caption file. Example: .srt, .sbv, .sub, .vtt, .ttml, .dfxp, .scc, .stl, .cap');
          return false;
        }
      });


      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      var videoId = '<%-videoID%>';
      var chunk = "<%=chunk%>";
      console.log(chunk);
      console.log(videoId);



      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
          videoId: videoId,
          playerVars: {

          },
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }



      // 4. The API will call this function when the video player is   ready.
      function onPlayerReady(event) {
        event.target.playVideo();

        var chapterList = chunk.split(";");

        for (let i = 0; i < chapterList.length; i++) {
          var button = document.createElement("button");
          button.setAttribute("type", "button");
          button.setAttribute("class", "list-group-item btn-block");

          var time = chapterList[i].split(' ')[0];
          var count = time.split(':').length - 1;
          if (count > 0 && count <= 2) {
            button.innerHTML = chapterList[i];

            button.addEventListener("click", function () {
              var second = 0;
              count = chapterList[i].split(' ')[0].split(':').length - 1;
              console.log(count);
              if (count == 1) {
                second = parseInt(chapterList[i].split(' ')[0].split(':')[0] * 60) + parseInt(chapterList[i].split(' ')[0].split(':')[1]);
              }
              else if (count == 2) {
                second = parseInt(chapterList[i].split(' ')[0].split(':')[0] * 60 * 60) + parseInt(chapterList[i].split(' ')[0].split(':')[1] * 60) + parseInt(chapterList[i].split(' ')[0].split(':')[2]);
              }
              console.log(second);
              player.seekTo(second);
            });
            var buttonDiv = document.getElementById("chapter");
            buttonDiv.appendChild(button);
          }
        }

        // player.seekTo("100000");
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>
</body>

</html>